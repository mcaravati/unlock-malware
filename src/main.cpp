#include <iostream>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <string.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define SERVER_PORT 1337
#define BACKLOG 5
#define BUFFER_SIZE 1024


void exit_if(unsigned int cond, const char *error_message) {
    if (!cond) return;

    write(STDERR_FILENO, error_message, strlen(error_message));
    _exit(1);
}

int main()
{
    char buffer[BUFFER_SIZE];

    // Create a simple socket server using IPV4 and TCP
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    exit_if(fd == -1, "[-] Error while opening socket\n");

    // Server socket structure
    struct sockaddr_in server_in, client_in;
    server_in.sin_family = AF_INET;
    server_in.sin_port = htons(SERVER_PORT);
    server_in.sin_addr.s_addr = INADDR_ANY;

    // Bind to the address
    int success = bind(fd, (struct sockaddr *) &server_in, sizeof(server_in));
    exit_if(success == -1, "[-] Error while binding to port\n");

    // Listen to client connections
    success = listen(fd, BACKLOG);
    socklen_t clilen = sizeof(client_in);

    // Accept the connection
    int new_sock_fd = accept(fd, (struct sockaddr *) &client_in, &clilen);
    exit_if(new_sock_fd == -1, "[-] Error while accepting client\n");

    for (;;) {
        // Read from client
        bzero(buffer, BUFFER_SIZE);
        int bytes_read = read(new_sock_fd, buffer, BUFFER_SIZE - 1);
        exit_if(bytes_read == -1, "[-] Error reading from client fd");

        // Print client message
        printf("Client message : %s\n", buffer);

        if (strcmp(buffer, "EXIT\n") == 0) {
            break;
        }

        // Send response
        int bytes_written = write(new_sock_fd, "I received your message !\n", 26);
        exit_if(bytes_written == -1, "[-] Error writing to client\n");
    }

    // Close sockets
    close(fd);
    close(new_sock_fd);

    return 0;
}